import org.apache.tools.ant.taskdefs.condition.Os;

plugins {
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.app' version '3.1.0'
    id "com.github.node-gradle.node" version "3.1.1"
}

app {
    name = "${appName}"
    displayName = "${appDisplayName}"
    vendorName = "${vendorName}"
    vendorUrl = "${vendorUrl}"
    systemVersion = "${xpVersion}"
}

// This variable is used in the include lib-react4xp below, and also used in the optional tasks in readme.gradle
rootProject.ext.LIB_REACT4XP_VERSION = "2.0.2"

dependencies {
    implementation "com.enonic.xp:core-api:${xpVersion}"
    implementation "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    //include "com.enonic.xp:lib-auth:${xpVersion}"
    //include "com.enonic.xp:lib-context:${xpVersion}"
    //include "com.enonic.xp:lib-i18n:${xpVersion}"
    //include "com.enonic.xp:lib-io:${xpVersion}"
    //include "com.enonic.xp:lib-mail:${xpVersion}"
    //include "com.enonic.xp:lib-repo:${xpVersion}"
    //include "com.enonic.xp:lib-websocket:${xpVersion}"
    include "com.enonic.lib:lib-thymeleaf:2.0.1"
    include "com.enonic.lib:lib-guillotine:4.2.0"

    include "com.enonic.lib:lib-react4xp:${rootProject.ext.LIB_REACT4XP_VERSION}"
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo()
}




///////////////////////////////////////////////////////////////////////////////////////////////////

// The react4xp NPM package also carries additional .gradle files that are required by this gradle setup (further below).
// If they don't exist, run 'npm install' as a shell command (can't be done as a regular gradle task,
// since they are needed in the gradle config phase).
def react4xpGradlePath = 'node_modules/react4xp/react4xp.gradle'
def react4xpGradleFile = new File(react4xpGradlePath)
if (!react4xpGradleFile.exists()) {
    String npm = 'npm'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        npm = 'npm.cmd'
    }
    def command = npm + " install"
    println "\nNot found: $react4xpGradlePath - running shell command:"
    println command
    def proc = command.execute()
    proc.in.eachLine { line -> println line }
    proc.out.close()
    proc.waitFor()
}

// Necessary react4xp build setup.
// node_modules/react4xp/react4xp.gradle (react4xpGradlePath) etc. are used by the gradle tasks, so 'npm install' should have been run automatically by now (above).
apply from: react4xpGradlePath

// Optional dev convenience:
// Adjusts the regular 'npmInstall' gradle task with two improvements:
//      - NSI allows npm-linked local development (https://www.npmjs.com/package/npm-safe-install)
//      - faster gradle up-to-date check during build (only checks content of package.json and package-lock.json,
//          and a marker file for whether node_module exists as a regular or NSI-linked version. Runs NSI if it's linked.
//          Does not check the entire node_modules subtree).
apply from: 'node_modules/react4xp/npmInstall.gradle'

// Optional dev convenience:
// Adds the 'updateReadme' gradle task which generates readme files at root from docs/README.src.md
apply from: 'node_modules/react4xp/updaters.gradle'






////////////////////////////////////////////////////////////////////////////////////////////////////

// This task takes care of XP non-react (and therefore non-react4xp) es6 files under src/main/resources/site.
// This is independent of react4xp, so you can replace this with your own build steps if you want.
// IMPORTANT: Note how this task ignores .jsx files under src/main/resources. If you use your own logic to compile non-react
// XP files (i.e. replace this task or add more to it), you should usually make it ignore .jsx files the same way, to
// ensure that those are handled only by the react4xp build (node_modules/react4xp/react4xp.gradle, aka. react4xpGradlePath)
// and not compiled twice.
task compileXP(type: NodeTask) {
    group 'enonic xp'
    description 'Babel-compile Enonic XP ES6 source files (important: ignoring JSX components since they are left to react4xp)'

    script = file('node_modules/@babel/cli/bin/babel.js')
    args = ["src/main/resources", "--out-dir", "build/resources/main", "--ignore", "**/*.jsx"]      // <-- Ignoring JSX in the XP structure is important!

    inputs.dir 'src/main/resources'
    outputs.dir("build/resources/main")
}
compileXP.dependsOn += npmInstall
jar.dependsOn += 'compileXP'



