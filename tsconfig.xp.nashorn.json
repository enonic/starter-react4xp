{ // https://www.typescriptlang.org/tsconfig
	"include": [
		// Make sure default types matches Nashorn
		"./node_modules/typescript/lib/lib.es5.d.ts",
		"./src/main/resources/**/*.ts"
	],
	"exclude": [
		"./src/main/resources/**/*.tsx",
		"./src/main/resources/headless/guillotineRequest.ts"
	],
	"compilerOptions": {
		"allowUmdGlobalAccess": true,
		"esModuleInterop": true,
		"noLib": true,

		"paths": {
			"/lib/enonic/asset": [
				"./node_modules/@enonic-types/lib-asset"
			],
			"/lib/enonic/react4xp": [
				"./node_modules/@enonic-types/lib-react4xp"
			],
			"/lib/xp/*": [
				"./node_modules/@enonic-types/lib-*"
			],
			"/react4xp": [
				"./src/main/resources/react4xp"
			],
			"/react4xp/*": [
				"./src/main/resources/react4xp/*"
			],
			"/*": [
				"./src/main/resources/*"
			]
			// So one can import local files using absolute path (same as Enonic does during runtime).
		},
		// Even though the setting disables type checking for d.ts files,
		// TypeScript still type checks the code you specifically
		// refer to in your application's source code.
		"skipLibCheck": true,
		// Disable type checking for node_modules

		// By default all visible ”@types” packages are included in your compilation.
		// Packages in node_modules/@types of any enclosing folder are considered visible.
		// For example, that means packages within ./node_modules/@types/,
		// ../node_modules/@types/, ../../node_modules/@types/, and so on.
		// If types is specified, only packages listed will be included in the global scope.
		// This feature differs from typeRoots in that it is about specifying only the exact
		// types you want included, whereas typeRoots supports saying you want particular folders.
		"types": [
			"@enonic-types/global",
			"@enonic-types/core"
		]
	}
}
