{ // https://www.typescriptlang.org/tsconfig
	"include": [
		// "node_modules/typescript/lib/lib.es2015.d.ts",
		// "node_modules/typescript/lib/lib.dom.d.ts",
		"./src/main/resources/**/*.tsx"
	],
	// "exclude": [],
	"compilerOptions": {
		"allowSyntheticDefaultImports": true,
		"allowUmdGlobalAccess": true,
		"jsx": "react",
		"lib": [
			"DOM", // console
			"ES2015",
			// See note above target
			// "ES2016",
			// "ES2017",
			// "ES2018",
			// "ES2019",
			// "ES2020",
			// "ES2021",
			// "ES2022",
		],
		"module": "ES2015", // Graal-JS supports ESM?
		"moduleResolution": "node",
		"paths": {
			"@enonic-types/core": ["../xp-comlock-9742/modules/lib/core/index.d.ts"],
			"/lib/xp/content": ["../xp-comlock-9742/modules/lib/lib-content/src/main/resources/lib/xp/content.ts"],
			"/lib/xp/portal": ["../xp-comlock-9742/modules/lib/lib-portal/src/main/resources/lib/xp/portal.ts"],
			// So one can import local files using absolute path same as
			// * react4xp resolves during build time
			// * and Enonic XP resolves during runtime
			"/*": ["./src/main/resources/*"], // This works during type checking
		},

		"noLib": false,
		// "rootDir": ".",
		"skipLibCheck": true,

		// As of 2023-03-15 GraalJS support ES2022
		// https://github.com/oracle/graaljs/blob/master/docs/user/JavaScriptCompatibility.md
		// But Almost every modern browser is still missing features from ES2017-ES2020
		// https://stackoverflow.com/questions/61835971/es7-es8-es9-es10-es11-browser-support
		// Since the output can be used both server-side (GraalJS) and
		// client-side (modern browsers) we have to use the "lowest" supported version.
		"target": "ES2015",

		// "typeRoots": [
		// 	"./node_modules/@types",
		// 	"./node_modules/@enonic-types"
		// ],
		"types": [
			// "@enonic-types/global"
		],
	},
}
