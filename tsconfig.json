{ // https://www.typescriptlang.org/tsconfig
	"compilerOptions": {
	//──────────────────────────────────────────────────────────────────────────
	// Modules
	//──────────────────────────────────────────────────────────────────────────
	"allowUmdGlobalAccess": true,
	"baseUrl": "./",

	"paths": {
		"/lib/enonic/react4xp": [
			// "@enonic-types/lib-react4xp", // TODO
			"../lib-react4xp/build/resources/main/lib/enonic/react4xp"
		],
		"/lib/xp/*": ["node_modules/@enonic-types/lib-*"],
		"/*": ["src/main/resources/*"], // So one can import local files using absolute path (same as Enonic does during runtime).
	},

	// By default all visible ”@types” packages are included in your compilation.
	// Packages in node_modules/@types of any enclosing folder are considered visible.
	// For example, that means packages within ./node_modules/@types/,
	// ../node_modules/@types/, ../../node_modules/@types/, and so on.
	// If typeRoots is specified, only packages under typeRoots will be included.
	"typeRoots": [
		"node_modules/@types",
		"node_modules/@enonic-types"
	],

	// By default all visible ”@types” packages are included in your compilation.
	// Packages in node_modules/@types of any enclosing folder are considered visible.
	// For example, that means packages within ./node_modules/@types/,
	// ../node_modules/@types/, ../../node_modules/@types/, and so on.
	// If types is specified, only packages listed will be included in the global scope.
	// This feature differs from typeRoots in that it is about specifying only the exact
	// types you want included, whereas typeRoots supports saying you want particular folders.
	// "types": [
		// "@enonic-types/global", // No point, already added via typeRoots
		// "@enonic-types/lib-event" // No point, since it doesn't affect global scope
		// "@types/react"
	// ],
	//──────────────────────────────────────────────────────────────────────────
	// Language and Environment
	//──────────────────────────────────────────────────────────────────────────
	// "jsx": "react",
	}
}
