plugins {
    id 'com.enonic.defaults' version '2.0.1'
    id 'com.enonic.xp.app' version '2.0.0'
    id "com.moowork.node" version "1.3.1"
    id 'maven-publish'
}

app {
    name = "${appName}"
    displayName = "${appDisplayName}"
    vendorName = "${vendorName}"
    vendorUrl = "${vendorUrl}"
    systemVersion = "${xpVersion}"
}

dependencies {
    compile "com.enonic.xp:core-api:${xpVersion}"
    compile "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    //include "com.enonic.xp:lib-auth:${xpVersion}"
    //include "com.enonic.xp:lib-context:${xpVersion}"
    //include "com.enonic.xp:lib-i18n:${xpVersion}"
    //include "com.enonic.xp:lib-io:${xpVersion}"
    //include "com.enonic.xp:lib-mail:${xpVersion}"
    //include "com.enonic.xp:lib-repo:${xpVersion}"
    //include "com.enonic.xp:lib-websocket:${xpVersion}"
    include "com.enonic.lib:lib-thymeleaf:2.0.0"
    include "com.enonic.lib:lib-mustache:2.0.0"
    include "com.enonic.lib:lib-util:2.0.0"

    include 'com.enonic.lib:lib-react4xp:0.3.7'
}

repositories {
    mavenLocal()
    jcenter()
    xp.enonicRepo()
}


npmInstall.inputs.file("package.json")
npmInstall.inputs.file("package-lock.json")
npmInstall.outputs.dir('node_modules')


import groovy.json.JsonOutput
import groovy.json.JsonSlurper

// Resolves the project folder root
def ROOT = project.projectDir.toString()

def react4xp = {}
file("react4xp.properties").withReader { reader ->
    react4xp = new Properties()
    react4xp.load(reader)
}

react4xp.outputFileName = ROOT + '/' + react4xp.masterConfigFileName
if(react4xp.nashornPolyfillsSource != null) {
    react4xp.NASHORNPOLYFILLS_SOURCE = react4xp.nashornPolyfillsSource
}

react4xp.masterConfigFileName = react4xp.masterConfigFileName != null ? react4xp.masterConfigFileName : "build/react4xp_constants.json"
react4xp.outputFileName = ROOT + '/' + react4xp.masterConfigFileName


// Build the master config JSON file and the copy:
task config_react4xp(type: NodeTask) {
    group 'React4xp'
    description 'Build the master config JSON file and its copy'

    script = file('node_modules/react4xp-buildconstants/cli.js')
    args = [ ROOT, JsonOutput.toJson(react4xp) ]
}
config_react4xp.inputs.file("react4xp.properties")
config_react4xp.outputs.file(react4xp.masterConfigFileName)

config_react4xp.dependsOn += 'npmInstall'
config_react4xp.dependsOn += 'processResources'


// Necessary placeholder, will be filled during build
def CONFIG = {}
task config_tasks {
    // After the above script has run and created the config file, use the constructed values from the script to update the configuration of the next task(s):
    doLast {
        // Read the file content into an object
        def configFile = new File(react4xp.masterConfigFileName)
        CONFIG = new JsonSlurper().parseText(configFile.text)

        tasks['webpack_react4xp'].configure {
            inputs.dir(CONFIG.SRC_SITE)
            inputs.dir(CONFIG.SRC_R4X)
            outputs.dir(CONFIG.BUILD_R4X)
        }
        tasks['babelXP'].configure {
            args = ["src/main/resources", "--out-dir", CONFIG.BUILD_MAIN, "--ignore", "**/*.jsx"]  // <-- Still ignoring JSX in the XP structure
            outputs.dir(CONFIG.BUILD_MAIN)
        }
    }
}
config_tasks.dependsOn += 'config_react4xp'



// Compile:
task webpack_react4xp(type: NodeTask) {
    group 'React4xp'
    description 'Run the imported react4xp webpack scripts that compile the components and externals (as well as client and nashorn polyfills if needed)'

    script = file('node_modules/webpack/bin/webpack.js')
    args = [
            // 1 MANDATORY STEP:
            '--config', 'node_modules/react4xp-build-components/webpack.config.js',			    // <-- This step compiles the components added in this project into runnable/renderable components. See react4xp-build-components docs.

            // 3 OPTIONAL STEPS. UNCOMMENT TO ACTIVATE:
            //'--config', 'node_modules/react4xp-runtime-client/webpack.config.js',   		    // <-- Activate this line to override the included clientside wrapper (included in lib-react4xp-runtime) - see the react4xp-runtime-client docs.
            '--config', 'node_modules/react4xp-runtime-externals/webpack.config.js',  		    // <-- This line supplies dependencies declared in the EXTERNALS config constant - see the react4xp-runtime-externals docs.
            //'--config', 'node_modules/react4xp-runtime-nashornpolyfills/webpack.config.js',   // <-- This line adds custom nashorn polyfill code if the default ones aren't enough for server-side rendering your react components. IMPORTANT: add a file with source code somewhere in this project, and add a NASHORNPOLYFILLS_SOURCE attribute to the REACT4XP_OVERRIDES above here. NASHORNPOLYFILLS_SOURCE should be a full filename with extension, and path relative to this project folder.

            '--env.REACT4XP_CONFIG_FILE=' + react4xp.masterConfigFileName, 			                    // <-- Tells all of the steps here where to find the master config file
            '--progress', '--color'  								                            // <-- Just pretty
    ]

    inputs.file(react4xp.masterConfigFileName)
    inputs.file("package.json")
    inputs.file("package-lock.json")
}
webpack_react4xp.dependsOn += 'config_tasks'


task babelXP(type: NodeTask) {
    group 'React4xp'
    description 'Compile XP components from ES6, ignoring JSX components'

    script = file('node_modules/babel-cli/bin/babel.js')
    args = ["src/main/resources", "--out-dir", "build/resources/main", "--ignore", "**/*.jsx"]      // <-- Ignoring JSX in the XP structure is important!

    inputs.dir 'src/main/resources'
    outputs.dir("build/resources/main")
}
babelXP.dependsOn += 'config_tasks'

jar.dependsOn += 'webpack_react4xp'
jar.dependsOn += 'babelXP'



// Note: the 2 watcher tasks from previous version are removed. Use "npm run watch" instead, in combination with XP dev mode (e.g. enonic sandbox start --dev) 
