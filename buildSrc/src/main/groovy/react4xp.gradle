plugins {
  id "com.github.node-gradle.node"
}

project.ext.react4xp = [
    BUILD_ENV: 'production',
    VERBOSE: 'false'
]


if (
    project.hasProperty('dev')
        || project.hasProperty('development')
) {
  project.ext.react4xp.BUILD_ENV='development';
}


// Used in ./npmInstall.gradle
if (project.hasProperty("link") || project.hasProperty("linked") || project.ext.react4xp.BUILD_ENV == "development") {
  project.ext.react4xp.NPMLINKED = true
}


if (gradle.startParameter.logLevel == LogLevel.INFO) {
  project.ext.react4xp.VERBOSE = 'true';
}


task react4xpComponents(type: NpmTask) {
  group 'React4xp'
  description 'Compile the parent projects react components'
  args = [
      'explore', '@enonic/react4xp', '--',
      'npm', 'run', 'webpack:components', '--',
      '--env', 'DIR_PATH_ABSOLUTE_PROJECT=' + project.projectDir,
      '--env', 'BUILD_ENV=' + project.ext.react4xp.BUILD_ENV,
      '--env', 'VERBOSE=' + project.ext.react4xp.VERBOSE
  ]
  inputs.files fileTree(
      dir: './',
      include: [
          'webpack.config.react4xp.js',
          'src/main/resources/**/*.jsx',
          'src/main/resources/**/*.tsx'
      ]
  )
  outputs.dir 'build/resources/main'
}
jar.dependsOn += 'react4xpComponents'


task react4xpExternals(type: NpmTask) {
  group 'React4xp'
  description 'Compile the externals (react and react-dom)'
  args = [
      'explore', '@enonic/react4xp', '--',
      'npm', 'run', 'webpack:externals', '--',
      '--env', 'DIR_PATH_ABSOLUTE_PROJECT=' + project.projectDir,
      '--env', 'BUILD_ENV=' + project.ext.react4xp.BUILD_ENV,
      '--env', 'VERBOSE=' + project.ext.react4xp.VERBOSE
  ]
  inputs.files fileTree(dir: './', include: 'react4xp.config.js')
  outputs.dir 'build/resources/main/assets/react4xp'
}
jar.dependsOn += 'react4xpExternals'


task react4xpNashornPolyfills(type: NpmTask) {
  group 'React4xp'
  description 'Run the imported react4xp webpack scripts that compile the components and externals (as well as nashorn polyfills if needed)'
  args = [
      'explore', '@enonic/react4xp', '--',
      'npm', 'run', 'webpack:nashornPolyfills', '--',
      '--env', 'DIR_PATH_ABSOLUTE_PROJECT=' + project.projectDir,
      '--env', 'BUILD_ENV=' + project.ext.react4xp.BUILD_ENV,
      '--env', 'VERBOSE=' + project.ext.react4xp.VERBOSE
  ]
  inputs.files fileTree(dir: 'src/main/resources', include: 'react4xpNashornPolyfills.es6')
  outputs.dir 'build/resources/main/lib/enonic/react4xp'
}
jar.dependsOn += 'react4xpNashornPolyfills'


StartParameter startParameter = project.gradle.startParameter;
[
    deploy,
    build,
    check,
    test,
    compileTestJava,
    processTestResources,
    assemble,
    jar,
    classes,
    compileJava,
    processResources,
    npmInstall,
    npmSetup,
    nodeSetup,
    clean
].each { task ->

  // This will make sure that various tasks are not run on when starting continuous build.
  // However once a task is triggered by file change, it will still execute it's dependencies ;(
  task.onlyIf { !startParameter.isContinuous() }

  // This should skip a task even if it's "executed"
  task.doFirst {
    if (startParameter.isContinuous()) { throw new StopExecutionException() }
  }

}

// Adds optional dev convenience: adjusts the regular 'npmInstall' gradle task with two improvements:
//      - NSI allows npm-linked local development (https://www.npmjs.com/package/npm-safe-install)
//      - faster gradle up-to-date check during build (only checks content of package.json and package-lock.json,
//          and a marker file for whether node_module exists as a regular or NSI-linked version. Runs NSI if it's linked.
//          Does not check the entire node_modules subtree).


// These are not supplied from react4xp, they are just names used for buildtime housekeeping:
def markerName = "node_modules/@enonic/react4xp/npmInstalled.marker"

if (project.ext.react4xp.NPMLINKED == true) {
  task nsiInstall(type: NodeTask) {
    doFirst {
      println "react4xp build mode is set to '${project.ext.react4xp.BUILD_ENV}':\nOVERRIDING VANILLA npmInstall IN FAVOR OF node-safe-install (nsi) for retaining 'npm link' symlinks. For easy (POSIX) symlinking to npm-react4xp, stand in this projects root directory and run getlinks.sh with a relative link to a local npm-react4xp directory."
    }

    def buildSystemNsiPath = 'node_modules/@enonic/react4xp/node_modules/npm-safe-install/out/cli.js';
    def buildSystemNsi = new File(buildSystemNsiPath);
    if (buildSystemNsi.exists()) {
      script = file(buildSystemNsiPath)
    }

    def localNsiPath = 'node_modules/npm-safe-install/out/cli.js';
    def localNsi = new File(localNsiPath);
    if (localNsi.exists()) {
      script = file(localNsiPath)
    }

    doLast {
      def marker = new File(markerName)
      new File(marker.getParent()).mkdirs()
      marker.text = """
Marker file, indicating that the **nsiInstall** gradle task (yes, NSI - node-safe-install) has been run in this subproject - retaining any locally linked react4xp packages in node_module.
"""
    }
  }
  nsiInstall.inputs.files('package.json', 'package-lock.json', 'build.gradle')
  nsiInstall.outputs.file('package-lock.json')
  nsiInstall.outputs.file file(markerName)

  npmInstall.enabled = false
  npmInstall.dependsOn nsiInstall

}