# A template version of this, with upated properties and explanations, can always be found in the react4xp NPM package:
# node_modules/react4xp/react4xp.properties after installing,
# or: https://github.com/enonic/react4xp-npm/blob/master/packages/react4xp/src/react4xp.properties



# buildEnv sets the build mode:
#   - 'production' yields compact output and will overwrite existing symlinks under node_modules. If needed, they must be rebuilt.
#   - 'development' enables more verbose terminal output during build,
#   - 'development' keeps compiled code more readable, and adds source maps,
#   - 'development' runs nsiInstall task instead of npmInstall. NsiInstall uses node-safe-install to wrap "npm install"
#                   in order to preserve existing symlinks under node_modules.
#
# Default build mode (if commented out here) is 'production'.
# Uncomment the following line to lock development build mode, or use the gradle CLI argument to make an ad hoc dev build: -Pdev or -Pdevelopment
#
# buildEnv = development

####################################   ENTRIES AND CHUNKING:

# If nothing is added below, this is the default behaviour:
#   - Default entry source folder is /site/, that is: src/main/resources/site/ and its subfolders.
#   - Everything under react4xp root folder (src/main/resources/react4xp/) will be considered chunks and will
#       be bundled by webpack into a single dependency imported by webpack: react4xp.<contenthash>.js
#   - Everything under the react4xp root folder (src/main/resources/react4xp/) will be considered non-entries:
#       added files here can be imported by react4xp entries, but otherwise unreachable from react4xp.
#   - Default entryExtensions (file extensions to look for when finding entries under OTHER entryDirs than /site/) are:
#       jsx, js, tsx, ts, es6, es


# chunkDirs are folder names where importable, non-entry code is kept. Comma-separated list of folder names, relative
#       to src/main/resources/react4xp/. Each folder added here will be bundled by webpack into a separate dependency
#       chunk with the same name as the folder, and a hash: <foldername>.<contenthash>.js. This is good for grouping
#       sets of dependencies that belong together, or will frequently be requested from the client together in some parts
#       of a web page but not others, etc. The react4xp root (src/main/resources/react4xp/) is the standard chunk 'react4xp',
#       but you can add subfolders here to bundle them (and their subfolders) in separate chunks. Or you can add relative
#       paths to the react4xp root to imported dependency code from elsewhere. Don't overlap with entryDirs or /site/.
chunkDirs =


# entryDirs are additional folder names where webpack will look for entry files. Comma-separated list of folder names,
#       relative to src/main/resources/react4xp/. By default, react4xp instructs webpack to look for entries under
#       src/main/resources/site/ (and in the react4xp-templates package). Added folders here will be kept out of bundled
#       dependency chunks (take care to avoid directory overlaps with chunkDirs) and treated separately. Files in
#       them will be compiled into react4xp entries, which most importantly get a jsxPath (relative to their entryDir, not
#       relative to /react4xp/) and therefore are available to react4xp.
#       overrideComponentWebpack file (see above).
#
#       For compatibility with earlier versions of react4xp, add _entries here.
entryDirs =


# entryExtensions are filename extensions of files (comma-separated list) below the entryDirs folders that webpack should
#       look for and turn into entries. NOTE that this doesn't apply to the default entry-folder src/main/resources/site/
#       (or the react4xp-templates package), where ONLY .jsx (and .tsx) files can be entries. This is to avoid mixups with
#       XP controllers etc, which can be .js or .es6. Default value if not changed is jsx,js,tsx,ts,es6,es. Also note that
#       tsx/ts files are NOT supported out of the box. Rules for typescript compilation must be added in your own
entryExtensions =




####################################   SERVER-SIDE RENDERING:

# Overrides SSR lazy dependency loading. If not overridden (aka, if commented out below), it depends on build mode (buildEnv above):
#           true in dev, false in prod.
# If false: all assets are loaded into the SSR engine as soon as it's initialized (on the first SSR):
#           nashornpolyfills, externals, vendors, dependency chunks, react4xp-regions and entries, in that order.
#           Fixed engine warm-up time, no further warm-up after initialization.
# If true: only nashornpolyfills and externals assets are loaded on engine initialization. Each entry and its dependency assets are
#           loaded (and cached for shared re-use across entries) only the first time that entry is rendered,
#           instead of loading everything on app startup.
#           Here, initial engine warm-up time is shorter than without lazy-loading, and depends on which entry is rendered first
#           - but the next entry rendering might require some more asset loading the first time THAT is rendered, etc.
# ssrLazyload = true


# Override SSR engine settings.
# Ref: https://github.com/openjdk/nashorn/blob/main/src/org.openjdk.nashorn/share/classes/org/openjdk/nashorn/internal/runtime/resources/Options.properties
# Default settings (if commented out) is:
#           1000
#           This corresponds to:
#           --persistent-code-cache, --class-cache-size=1000
# If only a number, changes the the number in --class-cache-size=<number> in the default setting above.
# If that number is set to 0 (or less), persistent code cache is switched off. Might affect performance positively or negatively, depending on your project.
# If a full string (more than just a number): completely overrides the default settings.
#           Interpreted as a comma-separated list of settings, same format as the default settings above, for example:
#           --persistent-code-cache, --class-cache-size=42, --lazy-compilation
#
# ssrSettings = 0


# Override the maximum SSR thread/engine count.
#
# Default value (if commented out): null, which means no limit on number of threads.
# If set as a number above 0, limits the number of SSR engines that are available for simultaneous server-side rendering.
#
# It's usually not necessary to set a limit on this, the java thread model will limit it to the amount of available cores (and maybe multiplied, depending on CPU hyperthreading etc).
# However, each SSR engine will load the assets it needs for rendering into memory, in its own independent nashorn engine and memory space.
# And for performance reasons, these engines will be re-used as much as possible, trying to avoid initializing new engines.
# In other words, the memory used will NOT be cleared and made available after a rendering, but the engines will keep already-loaded assets
# in memory. And in the long run, the result will probably be that every engine will keep every compiled react asset in memory.
# If this ever becomes a problem, the ssrMaxThreads can be used to set a limit on this.
#
# ssrMaxThreads = 0




####################################   WEBPACK:


# A minimal webpack config is included with react4xp, to build your react components and their dependencies: See node_modules/react4xp-build-components/webpack.config.js.
# To change this setup, or override or extend that webpack.configjs:
# make a custom file that default-exports a (env, config) => webpackConfigObject function, where:
#   - env is the collection of "--env." CLI arguments, and
#   - config is the default config from react4xp-build-components/webpack.config.js.
# Basically, manipulate or replace the config object and return it.
# Example file:
#             module.exports = function(env, config) {
#                 config.module.rules[0].test = /\.((tsx?)|(jsx?)|(es6))$/:
#                 return config;
#             };
# Finally, refer to that file here (path/filename relative to this project's root) and uncomment it:
#
overrideComponentWebpack = webpack.config.react4xp.js


# To add your own custom nashorn polyfills to the already-existing ones:
# make the a polyfilling file and refer to it here (path/filename relative to this project's root):
#
# nashornPolyfillsSource = src/main/resources/extraNashornPolyfills.es6





# Activates dependencies like react, react-dom, declared in the EXTERNALS config constant - see the react4xp-runtime-externals docs.
buildExternals = true

# File name for the built master config. Note that the runtime needs a copy of it in this location AND in the folder of the react4xp lib (a location predicted by the constants defined in the master config file itself). This is magically handled by the react4xp-buildconstants script package.
masterConfigFileName = build/react4xp_constants.json
overwriteConstantsFile = true
